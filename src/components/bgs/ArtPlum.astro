---

---

<canvas id="art-plum" width="400" height="400"></canvas>

<!-- <script is:inline data-astro-rerun>
  function useRafFn(fn, options) {
    const { immediate = true, fpsLimit = undefined } = options
    const intervalLimit = fpsLimit ? 1000 / fpsLimit : null

    let isActive = false
    let previousFrameTimestamp = 0
    let rafId = null

    function loop(timestamp) {
      console.log('loop')
      if (!isActive) return

      if (!previousFrameTimestamp) previousFrameTimestamp = timestamp

      const delta = timestamp - previousFrameTimestamp

      if (intervalLimit && delta < intervalLimit) {
        rafId = requestAnimationFrame(loop)
        return
      }

      previousFrameTimestamp = timestamp
      fn({ delta, timestamp })
      rafId = requestAnimationFrame(loop)
    }

    function resume() {
      if (!isActive) {
        isActive = true
        previousFrameTimestamp = 0
        rafId = requestAnimationFrame(loop)
        console.log('resume rafId', rafId)
      }
    }

    function pause() {
      console.log('pause')
      isActive = false
      if (rafId !== null) {
        console.log('pause rafId', rafId)
        cancelAnimationFrame(rafId)
        rafId = null
      }
    }

    if (immediate) resume()

    return { pause, resume }
  }

  function initCanvas(canvas, width = 400, height = 400, _dpi) {
    console.log('init')
    const ctx = canvas.getContext('2d')

    const dpr = devicePixelRatio || 1
    // prettier-ignore
    // @ts-expect-error (vendor)
    const bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1
    const dpi = _dpi || dpr / bsr

    canvas.style.width = `${width}px`
    canvas.style.height = `${height}px`
    canvas.width = dpi * width
    canvas.height = dpi * height
    ctx.scale(dpi, dpi)

    return { ctx, dpi }
  }

  function polar2cart(x = 0, y = 0, r = 0, theta = 0) {
    const dx = r * Math.cos(theta)
    const dy = r * Math.sin(theta)
    return [x + dx, y + dy]
  }

  function create() {
    console.log('ArtPlum')

    const r180 = Math.PI
    const r90 = Math.PI / 2
    const r15 = Math.PI / 12
    const color = '#88888825'
    const threshold = 30
    const len = 6
    const interval = 1000 / 40
    const { random } = Math
    const randomMiddle = () => random() * 0.6 + 0.2

    let steps = null
    let prevSteps = null

    /* Canvas drawing logic (recursively draw each branch) */
    function step(x, y, rad, counter = { value: 0 }) {
      const length = random() * len
      const [nx, ny] = polar2cart(x, y, length, rad)

      ctx.beginPath()
      ctx.moveTo(x, y)
      ctx.lineTo(nx, ny)
      ctx.stroke()

      // out of bounds
      if (nx < -100 || nx > width + 100 || ny < -100 || ny > height + 100)
        return

      counter.value += 1
      const rate = counter.value <= threshold ? 0.8 : 0.5
      const rad1 = rad + random() * r15
      const rad2 = rad - random() * r15

      // left branch
      if (random() < rate) steps.push(() => step(nx, ny, rad1, counter))

      // right branch
      if (random() < rate) steps.push(() => step(nx, ny, rad2, counter))
    }

    /* RAF callback functions */
    function frame() {
      const now = performance.now()
      if (now - lastTime < interval) return
      lastTime = now

      prevSteps = steps
      steps = []

      if (!prevSteps?.length) {
        window.controls.pause()
        steps = null
        prevSteps = null
        return
      }

      // execute all the steps from the previous frame
      prevSteps.forEach((i) => {
        // 50% chance to keep the step for the next frame, to create a more organic look
        if (random() < 0.5) steps.push(i)
        else i()
      })

      prevSteps = null
    }

    /* Start drawing */
    function start() {
      console.log('start')
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // prevSteps = []
      steps = [
        () => step(randomMiddle() * width, -5, r90),
        () => step(randomMiddle() * width, height + 5, -r90),
        () => step(-5, randomMiddle() * height, 0),
        () => step(width + 5, randomMiddle() * height, r180),
      ]
      if (width < 500) steps = steps.slice(0, 2)

      window.controls.resume()
    }

    /* Create dynamic plum on canvas */
    const canvas = document.getElementById('art-plum')

    const width = window.innerWidth
    const height = window.innerHeight

    const { ctx } = initCanvas(canvas, width, height)
    ctx.lineWidth = 1
    ctx.strokeStyle = color

    let lastTime = performance.now()

    // initialize RAF control
    window.controls = useRafFn(frame, { immediate: false })

    start()
  }

  create()
</script> -->

<!-- 在before-swap中获取不到controls切换到另一个页面后还是会继续loop（如果没有停止的话） -->
<script>
  import { useRafFn } from '~/hooks'
  import { initCanvas, polar2cart } from '~/utils'
  import type { Fn } from '~/types'

  console.log('ArtPlum')

  document.addEventListener('astro:page-load', () => {
    console.log('page-load')

    const r180 = Math.PI
    const r90 = Math.PI / 2
    const r15 = Math.PI / 12
    const color = '#88888825'
    const threshold = 30
    const len = 6
    const interval = 1000 / 40
    const { random } = Math
    const randomMiddle = () => random() * 0.6 + 0.2

    let steps: Fn[] = []
    let prevSteps: Fn[] = []

    /* Canvas drawing logic (recursively draw each branch) */
    function step(
      x: number,
      y: number,
      rad: number,
      counter: { value: number } = { value: 0 }
    ) {
      const length = random() * len
      counter.value += 1

      const [nx, ny] = polar2cart(x, y, length, rad)

      ctx.beginPath()
      ctx.moveTo(x, y)
      ctx.lineTo(nx, ny)
      ctx.stroke()

      const rad1 = rad + random() * r15
      const rad2 = rad - random() * r15

      // out of bounds
      if (nx < -100 || nx > width + 100 || ny < -100 || ny > height + 100)
        return

      const rate = counter.value <= threshold ? 0.8 : 0.5

      // left branch
      if (random() < rate) steps.push(() => step(nx, ny, rad1, counter))

      // right branch
      if (random() < rate) steps.push(() => step(nx, ny, rad2, counter))
    }

    /* RAF callback functions */
    function frame() {
      const now = performance.now()
      if (now - lastTime < interval) return

      prevSteps = steps
      steps = []
      lastTime = now

      if (!prevSteps.length) {
        controls.pause()
      }

      // execute all the steps from the previous frame
      prevSteps.forEach((i) => {
        // 50% chance to keep the step for the next frame, to create a more organic look
        if (random() < 0.5) steps.push(i)
        else i()
      })
    }

    /* Start drawing */
    function start() {
      console.log('start')

      controls.pause()
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      prevSteps = []
      steps = [
        () => step(randomMiddle() * width, -5, r90),
        () => step(randomMiddle() * width, height + 5, -r90),
        () => step(-5, randomMiddle() * height, 0),
        () => step(width + 5, randomMiddle() * height, r180),
      ]
      if (width < 500) steps = steps.slice(0, 2)

      controls.resume()
    }

    /* Create dynamic plum on canvas */
    const canvas = document.getElementById('art-plum') as HTMLCanvasElement

    if (!canvas) return

    const width = window.innerWidth
    const height = window.innerHeight

    const { ctx } = initCanvas(canvas, width, height)
    ctx.lineWidth = 1
    ctx.strokeStyle = color

    let lastTime = performance.now()
    // initialize RAF control
    const controls = useRafFn(frame, { immediate: false })

    start()
  })

  /* document.addEventListener('astro:before-swap', () => {
    if (controls) controls.pause()
  }) */
</script>

<!-- 没有办法在切换页面后停止loop -->
<!-- <script>
  import { useWindowSize, useRafFn } from '~/hooks'
  import { initCanvas, polar2cart } from '~/utils'
  import type { Fn } from '~/types'

  console.log('art')

  const r180 = Math.PI
  const r90 = Math.PI / 2
  const r15 = Math.PI / 12
  const color = '#88888825'
  const MIN_BRANCH = 10

  const { random } = Math
  const { cleanup, ...size } = useWindowSize()

  // const start = ref<Fn>(() => {})
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  // const start: Fn = () => {}

  // const len = ref(6)
  const len = 6

  // const stopped = ref(false)
  // let stopped: boolean

  // const el = document.getElementById('art-plum')
  // console.log(el)

  const createArtPlum = () => {
    console.log('createArtPlum')

    const canvas = document.getElementById('art-plum') as HTMLCanvasElement
    const { ctx } = initCanvas(canvas, size.width, size.height)
    const { width, height } = canvas

    let steps: Fn[] = []
    let prevSteps: Fn[] = []

    const step = (
      x: number,
      y: number,
      rad: number,
      counter: { value: number } = { value: 0 }
    ) => {
      const length = random() * len
      counter.value += 1

      const [nx, ny] = polar2cart(x, y, length, rad)

      ctx.beginPath()
      ctx.moveTo(x, y)
      ctx.lineTo(nx, ny)
      ctx.stroke()

      const rad1 = rad + random() * r15
      const rad2 = rad - random() * r15

      // out of bounds
      if (
        nx < -100 ||
        nx > size.width + 100 ||
        ny < -100 ||
        ny > size.height + 100
      )
        return

      const rate = counter.value <= MIN_BRANCH ? 0.8 : 0.5

      // left branch
      if (random() < rate) steps.push(() => step(nx, ny, rad1, counter))

      // right branch
      if (random() < rate) steps.push(() => step(nx, ny, rad2, counter))
    }

    let lastTime = performance.now()
    const interval = 1000 / 40

    // let controls: ReturnType<typeof useRafFn>

    const frame = () => {
      if (performance.now() - lastTime < interval) return

      prevSteps = steps
      steps = []
      lastTime = performance.now()

      if (!prevSteps.length) {
        controls.pause()
        // stopped = true
      }

      // Execute all the steps from the previous frame
      prevSteps.forEach((i) => {
        // 50% chance to keep the step for the next frame, to create a more organic look
        if (random() < 0.5) steps.push(i)
        else i()
      })
    }

    const controls = useRafFn(frame, { immediate: false })

    // 0.2 - 0.8
    const randomMiddle = () => random() * 0.6 + 0.2

    const start = () => {
      controls.pause()
      ctx.clearRect(0, 0, width, height)
      ctx.lineWidth = 1
      ctx.strokeStyle = color
      prevSteps = []
      steps = [
        () => step(randomMiddle() * size.width, -5, r90),
        () => step(randomMiddle() * size.width, size.height + 5, -r90),
        () => step(-5, randomMiddle() * size.height, 0),
        () => step(size.width + 5, randomMiddle() * size.height, r180),
      ]
      if (size.width < 500) steps = steps.slice(0, 2)
      controls.resume()
      // stopped = false
    }

    start()
  }

  // document.addEventListener('astro:page-load', createArtPlum)
  document.addEventListener('astro:page-load', () => {
    console.log('page-load')
    createArtPlum()
  })

  /* document.addEventListener('astro:before-swap', () => {
    if (controls) controls.pause();
    ctx.clearRect(0, 0, size.width, size.height)
    window.removeEventListener('resize', cleanup)
  }) */
</script> -->
